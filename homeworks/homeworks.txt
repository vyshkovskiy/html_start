* Задача 1: 
Почитать про HTML - 
~ что это
~ зачем используется
~ где применяется
~ из чего состоит
~ с помощью чего его можно открыть (для редактирования) (например чтобы отредактировать картинку нужен фотошоп, а что нужно для HTML?)
~ c помощью чего его можно открыть (для отображения) (например, чтобы открыть картинку нужна программа просмотра картинок, а что нужно для HTML)
~ какая последняя версия
Написать ответы на все вопросы выше, + описать как ты понимаешь понятие «гипер разметка» (после того как прочтешь)

* Решение:
1.HTML- это язык гипертекстовой разметки, (это как бы текст, который содержит в себе много тегов зи-за чего и получается веб страница.(<это тег>) ) 
2.используется он для написания страниц.
3.применяется в браузере.
4.состоит он, как ранее говорилось из тегов
5.с помощью спец. редакторов "Eclipse, Komodo Edit и Bluefish", самый известный "Notepad++".
6.его можно открыть с помощью просмотра кода страницы.
7.последняя версия "5".

* Статус: Оплачено
*================================================*

* Задача 2: 
Создать HTML файл который будет выводить на экран текст “Hello World!”.
Требования: файл должен иметь минимальную HTML структуру.

* Решение:
Файл homeworks/hw2/Hello_World!.html

* Статус: Оплачено
*================================================*

* Задача 3:
Дать ответы на след вопросы:
~ Что такое тег?
~ Какие типы тегов есть?
~ Чем отличается строчный от блочного?
~ Примеры строчных
~ Примеры блочных
~ Можно ли ложить строчный элемент в блочный
~ А наоборот?
~ А блочный в блочный?
~ А строчный в строчный?
~ Что такое атрибуты
~ Зачем нужны атрибуты

* Решение:
1.Что такое тег?
Тег-это элемент языка разметки текста HTML.HTML-теги.
 ***Это специальные символы разметки языка HTML, позволяющие визуально оформлять содержимое веб-сайтов.
2.Какие типы тегов есть?
-теги верхнего уровня;
-теги заголовка документа;
-блочные элементы;
-строчные элементы;
-универсальные элементы;
-списки;
-таблицы;
-фреймы.
3.Чем отличается строчный от блочного?
строчные могут содержать в себе только даные или другие строчные элементы, а в блочные можно вложить другие блочные,строчные и даные.
Блочные элементы занимают всю доступную ширину, например, окна браузера, а ширина строчных элементов равна их содержимому плюс значения отступов, полей и границ.
4.Примеры строчных
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> вид текста изменяет таблица стилей, мы ее пока не учили
ещё с помощью строчного тега можно изменять вид текста
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<a>-предназначен для создания сылок
<b>-определяет жирное начертание текста
с помощь <big> можно увеличить размер шрифта на 1-цу,а <small>-уменьшить
5.Примеры блочных
<blockquote>-с помощью его можно выделить длинную цитату
<p>-определяет параграф (абзац) текста
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> готово
хочу чтобы ты мне как то побольше рассказал о строчных и блочных тегах)))
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
6.Можно ли ложить строчный элемент в блочный
строчный в блочный, да
7.А наоборот?
нет
8.А блочный в блочный?
можно
9.А строчный в строчный?
можно
10.Что такое атрибуты,Зачем нужны атрибуты?
атрибуты сообщают браузеру, каким образом должен отображаться тот или иной элемент страницы.
атрибуты позволяют сделать более разнообразными внешний вид информации, добавляемой с помощью одинаковых тегов.

* Статус: Оплачено
*================================================*

* Задача 4:
Сделать html, который будет отображаться также как на скриншоте. + структура должна быть такая как задумана (разберись сам). Требование - структура HTML5

* Решение:
Файл homeworks/hw4/noobasiiiik.html

* Статус: Оплачено
*================================================*

* Задача 5:
- что такое кодировка 
- какие есть
- чем отличаются
- какая чаще всего используется
- установить Notepad++
- как узнать кодировку файла в Notepad++
- как поменять кодировку в Notepad++
- как преобразовать файл в другую кодировку в Notepad++
- установить Sublime text
- как узнать кодировку файла в Sublime text
- как поменять кодировку в Sublime text
- как преобразовать файл в другую кодировку в sublime text
- как указать кодировку в хтмл файле
- скинуть 2 и 4 задачи в нормальной кодировке (кодировка файла должна совпадать с кодировкой html-ля)

* Решение:
1.что такое кодировка
Кодировку HTML-страницы нужно указывать для того, чтобы веб-браузер мог правильно отображать текст на странице. Если браузер неправильно угадает кодировку, то вместо текста будут отображаться иероглифы.

Чтобы сообщить браузеру кодировку HTML-страницы, необходимо внутри тега <head> использовать тег:

<meta charset="имя кодировки">
Самая распространённая современная кодировка — utf-8. Используйте её во всех своих проектах.

Для кириллицы в Windows charset часто задавали как windows-1251. Но сейчас это считается плохой практикой.
</head>
2.Какие виды (типы) кодировок есть?
Есть "однобайтовые кодировки" и "многобайтные кодировки".
Однобайтные:
ASCII-кодировка создана для латинского алфавита, цифры и основные знаки пунктуации.
КОИ8-является сейчас одной из кодировок, которые обязательно должна поддерживать любая русская web-страница.
Windows-1251- Вторая по значению в русском Интернете (и, безусловно, первая по употребимости на персональных компьютерах) кодировка — это стандартная кириллическая кодировка Microsoft Windows. Все Windows- приложения, работающие с русским языком, обязаны понимать эту кодировку без перевода. 
Семейство 8859. Latin-1.-расширяющих таблицу ASCII для латинских букв с диакритикой и лигатур (кодировка ISO 8859-1), кириллицы (ISO 8859-5), арабского (ISO 8859-6), греческого (ISO 8859-7), и других алфавитов.
Многобайтные: 
Unicode или же UTF-8-Эта «производная» кодировка пользуется для записи символов цепочками байтов различной длины (от одного до шести), которые с помощью несложного алгоритма преобразуются в Unicode- коды.
Для указания кодировки символов web-страницы используются следующие обозначения кодовых таблиц:

windows-1251 - кириллица Windows
KOI8-R - Виды кодировок символов КОИ8 для русского языка
KOI8-U - кодировка КОИ8 для украинского языка
ISO 8859-1 - кодировка Latin-1
ISO 8859-5 - кодировка семейства ISO 8859 для символов кирилицы
UTF-8 - Unicode - стандарт для HTML.
3. Чем отличаются?
Отличаются тем что однобайтные разделялись на какие то под группы не понятные в которых можно было вписывать только 128 символов, а у многобайтных есть специально созданный для HTML "UNICODE or UTF-8".
4. Какая чаще всего используется?
Чаще всего используется UTF-8 (Unicode).
5.Как поменять кодировку файла в Notepad++?
В панеле где написано "Кодировки")))
6.как узнать кодировку файла в Notepad++?
В нижнем правом углу написана кодировка)
7.как преобразовать файл в другую кодировку в Notepad++?
(Не понял вопроса) указать её в "<meta charset="....">"

- как поменять кодировку в Notepad++
в верхней панели во вкладке "кодировки" можно изменить кодировку
- как преобразовать файл в другую кодировку в Notepad++
в той же вкладке под кодировками 
- установить Sublime text
есть
- как узнать кодировку файла в Sublime text
Первый способ узнать кодировку это через консоль, нажимаем Ctrl+` или View -> Show Console и в консоль печатаем следующую команду view.encoding().
- как поменять кодировку в Sublime text
Что бы изменить кодировку необходимо переоткрыть файл заново или пересохранить. Первый вариант сохраняем заново файл через File –> Save with Encoding из списка выбираем utf-8, после этого необходимо закрыть и открыть файл.

Так же мы можем сделать аналогичные действия через File –> Reopen with Encoding.
после этих действий проблема должна исправится.
- как преобразовать файл в другую кодировку в sublime text
Как поменять кодировку в Sublime Text, чтобы файл открылся правильно и с нормальными символами? Для этого открываем в меню File –> Reopen with Encoding и выбираем ту кодировку, в которой хотим видеть этот файл (зачастую это UTF-8). Таким образом будет сделана смена кодировки и sublime переоткроет файл в новой кодировке. При этом символы должны отображаться правильно.
- как указать кодировку в хтмл файле
<meta charset="имя кодировки"> чаще всего UTF-8
- скинуть 2 и 4 задачи в нормальной кодировке (кодировка файла должна совпадать с кодировкой html-ля)

* Статус: Оплачено
*================================================*

* Задача 6: 
Ответить на вопросы:
- что такое css
- зачем применяется
- пример (как записать)
- какие есть параметры
- есть 3 варианта записи css , какие?
- в каком порядке будет выставлен приоритет для троих вариантов (если записать разные параметры, при помощи всех троих вариантов, какой в результате сработает)?
- Что такое айди тега?
Что такое класс тега?
- каким параметром указать: ширину? Высоту? Размер текста? Цвет. Екста? Фон? Обводку? Цвет обводки? Сделать текст жирным?

* Решение:
1.Что такое css?
формальный язык описания внешнего вида документа, написанного с использованием языка разметки.

2.зачем применяется?
CSS используется создателями веб-страниц для задания цветов, шрифтов, расположения отдельных блоков и других аспектов представления внешнего вида этих веб-страниц.

3.пример (как записать)
1.
     <link rel="stylesheet" type="text/css" href="style.css">

2.
 <style type="text/css">
H1 {
	font-size: 120px размер текста
}
</style>
3.
<H1 style="font-size: 120px;"
Это пример HTML, задача - пример CSS

4.какие есть параметры?
font-family; имя шрифта название шрифта которым записан текст.
font-style; это каким шрифтом мы будем записывать текст, нормальным, курсивным.
font-variant; это значит какими буквами мы будем записывать, особыми прописными или капительным.
font-weight; это значит каким шрифтом мы будем писать, нормальным, Жирным, полужирным, светлое начертание.
font-size; это значит каким размером мы будем писать.

5.есть 3 варианта записи css , какие?
Вариант 1 — Глобальный CSS
Глобальный CSS помещается в контейнер <head> конкретной страницы. При таком варианте подключения классы и идентификаторы (ID) могут быть использованы для обращения к CSS коду, однако, они будут активны только на этой конкретной странице. CSS стили подключенные таким путем загружаются при каждой повторной загрузке страницы, поэтому они могут повлиять на скорость ее загрузки. Тем не менее, существует несколько ситуаций в которых использование глобальных CSS может быть полезно. К примеру, если вам необходимо отправить кому-нибудь шаблон страницы – вам гораздо проще будет предоставить предварительный результат, если все будет на одной странице. Глобальные CSS помещаются между тегами <style></style>. Вот пример глобальной таблицы стилей:

Преимущества глобальных CSS:

Таблица стилей влияет только на одну страницу.
В глобальной CSS могут быть использованы классы и идентификаторы (ID).
Нет необходимости загружать несколько файлов. HTML и CSS могут быть в одном и том же файле.

Недостатки глобальных CSS:

Увеличенное время загрузки страницы.
Подключается только к одной странице – неэффективно, если вы хотите использовать одну и ту же CSS для нескольких страниц.

Вариант 2 — Внешний CSS
Возможно самый удобный вариант для подключения CSS к вашему сайту, это его привязка к внешнему .css файлу. В этом случае все изменения сделанные во внешнем CSS файле, будут в целом отражаться на вашем сайте. Ссылка на внешний CSS файл помещается в контейнер <head> страницы:

Преимущества внешних CSS:

Меньший размер страницы HTML и более чистая структура файла.
Быстрая скорость загрузки.
Для разных страниц может быть использован один и тот же .css файл.

Недостатки внешних CSS:

Страница может некорректно отображаться до полной загрузки внешнего CSS.

Вариант 3 — Внутренний CSS
Внутренний CSS используется для конкретного тега HTML. Атрибут <style> используется для настройки этого тега. Этот вариант подключения CSS не является рекомендованным, так как в этом случае необходимо настраивать каждый тег HTML по отдельности. К тому же управление вашим сайтом может стать довольно трудным, если вы будете использовать только внутренний CSS. Однако в некоторых случаях этот способ может быть весьма полезным. К примеру, в случае если у вас нет доступа к CSS файлам, или вам необходимо применить правила только для одного элемента. Пример HTML страницы с внутренним CSS должен выглядеть так:

Преимущества внутреннего CSS:

Полезен для проверки и предпросмотра изменений.
Полезен для быстрых исправлений.
Меньше HTTP запросов.

Недостатки внутреннего CSS:

Внутренние CSS должны быть применены для каждого элемента в отдельности.


БОЛЕЕ ЛУЧШИЙ ДЛЯ ЗАПИСИ БУДЕТ ВНЕШНИЙ.

6.Что такое айди тега?
Атрибут id определяет уникальный идентификатор HTML элемента (его значение должно быть уникально для всего HTML документа).

Чаще всего атрибут id используется в качестве селектора для определения стиля элемента в каскадной таблице стилей (CSS).
Что можно сделать с id чего нельзя сделать с class?
с помощью айди можно выделить конкретные элементы которые ты указываешь с помощью # и то что ты запишешь после неё (#id)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
7.Что такое класс тега?
Атрибут class определяет один или несколько имен классов для HTML элемента.

В основном атрибут class используется для указания на класс в каскадной таблице стилей.
Одно или несколько имен классов. Чтобы присвоить несколько классов, необходимо эти имена классов разделять пробелом, например, <span class="left important">. Это позволяет одному HTML элементу присвоить несколько CSS классов.

Имя класса:

должно начинаться с латинской буквы A-Z или a-z
за которой может следовать: латинские буквы (A-Za-z), цифры (0-9), дефис ("-") и символ подчеркивания ("_")
в HTML все значения регистронезависимы.

8.каким параметром указать: ширину? Высоту? Размер текста? Цвет. Екста? Фон? Обводку? Цвет обводки? Сделать текст жирный?
Размер шрифта: font-size
фон: background
цвет текста: color
рамка: border
цвет рамки: border color
жирный текст: font-weight
ширина и высота:
max-height	Устанавливает максимальную высоту элемента.
max-width	Устанавливает максимальную ширину элемента
min-height	Устанавливает минимальную высоту элемента
min-width	Устанавливает минимальную ширину элемента

* Статус: Оплачено
*================================================*

* Задача 7: 
Сделать html такой же как на картике.

* Решение:
homeworks/hw7/kubiki.html

* Статус: Оплачено
*================================================*

* Задача 8: 
Посмотреть видео https://youtu.be/5pBcKKiZSGE, повторить все за Хауди. Сделать все за один присест (сел, смотришь видео, сразу повторяешь за ним)

* Решение:
Решение в файле  homeworks/hw8/dr.dre.html 

* Статус: Оплачено
*================================================*

* Задача 9: 
Посмотреть видео https://youtu.be/iPV5GKeHyV4, повторить все за Хауди. Сделать все за один присест (сел, смотришь видео, сразу повторяешь за ним)

* Решение:

* Статус: Готово
*================================================*

* Задача 10:
Лекция по гиту

* Сатус: Оплачено
*================================================*

* Задача 11:
Актуализировать git:
- Добавить файлы для 2 и 4 домашки в папки `homeworks/hw2` и `homeworks/hw4` соответсвенно
- Обновить описание для 2, 4 и 7 домашки (написать решение в файле homeworks/hw2/***.html)
- Обновить README.md - удалить 
"Тестовая запись
Тестовая запись 2
Тестовая запись 3"
- Удалить файл test.html

* Сатус: Оплачено
*================================================*

* Задача 12:
Добавить рекламный баннер на сайт Арагви

* Статус: Оплачено
*================================================*

* Задача 13:
(с решением)
1. Почитать про формы HTML.
2. Ответить на вопросы:
- Что такое форма?
Элемент <form>
<form> является блочным элементом, который определяет интерактивную часть веб-страницы. Как результат, все элементы управления (такие как <input>, <textarea> или <button>) должны находиться внутри элемента <form>.

Два атрибута HTML необходимы:

action содержит адрес, который определяет, куда будет отправлена информация формы;
method может быть либо GET, либо POST и определяет, как будет отправлена информация формы.
Как правило, информация формы посылается на сервер. Как эти данные затем будут обработаны выходит за рамки данного руководства.

Подумайте о форме как о наборе элементов управления, которые работают вместе, чтобы выполнить одну операцию. Если вы написали форму входа на сайт, у вас могло быть три поля:

поле для электронной почты <input type="email">
поле для пароля <input type="password">
кнопка отправки <input type="submit">
Эти три элемента HTML будут заключены внутри одной формы <form action="/login" method="POST">.

Вы можете аналогично добавить форму регистрации на той же HTML-странице, в отдельном элементе <form>.

- Из чего состоит форма?
форма состоит из полей в которые пользователь может вводить инфу.

- Какие есть поля?
textarea
tel- телефон
number
password
email
text

- Описать каждое поле (например, input - это ..., select - это ..., textarea - это ..., и дальше по списку)
Атрибут novalidate
Отменяет встроенную проверку данных введенных пользователем в форме на корректность.

Тег <button>
Создает на веб-странице кнопку.

Тег <fieldset>
Предназначен для группирования элементов формы.

Тег <form>
Устанавливает форму на веб-странице.

Тег <input>
Позволяет создавать разные элементы интерфейса.

Тег <keygen>
Используется для генерации пары ключей — закрытого и открытого.

Тег <label>
Устанавливает связь между определенной меткой и элементом формы.

Тег <legend>
Создает заголовок группы элементов формы.

Тег <optgroup>
Группирует элементы списка.

Тег <option>
Определяет отдельные пункты списка, создаваемого с помощью контейнера select

Тег <output>
Определяет область для вывода, преимущественно с помощью скриптов.

Тег <select>
Создает раскрывающийся список.

Тег <textarea>
Создает поле для многострочного текста.

- Что такое сабмит тип?
это кнопка отправки, если ее нет можно использовать ентер.
 
что делает action форма?
Action form нужна для того, чтобы указать сайт (место, путь) куда будет отправлена вся твоя деятельность.
 
- Какие есть методы сабмита формы? Чем они отличаются?
есть 2 метода GET and POST.
GET
Ограничение на объём	4 Кб
Передаваемые данные	Видны сразу всем.
Кэширование	Страницы с разными запросами считаются различными, их можно кэшировать как отдельные документы.
Закладки	Страницу с запросом можно добавить в закладки браузера и обратиться к ней позже
---------
POST
Ограничения задаются сервером.
Видны только при просмотре через расширения браузера или другими методами.
Страница всегда одна.
Страницы с разными запросами имеют один адрес, запрос повторить нельзя.

- Что такое placeholder?
Текстовые поля могут отображать подсказывающий текст, который исчезнет, как только будет введён некоторый текст.

<input type="text" placeholder="Введите своё имя">

Если вы начинаете набирать что-то, то увидите как текст «Введите своё имя» исчезнет.

* Сатус: Оплачено
*================================================*

* Задача 14:
Создать форму у которой будут следующие поля:
text - Имя
text - Фамилия
textarea - О себе
email - Имейл
select - Пол (муж/жен)
checkbox - Образование (школа, универ (бакалавр), универ (магистр))
submit - Отправить данные

Сделать две одинаковые формы - одна методом POST, вторая GET

* Решение:
В файле homeworks/hw14/index.html

* Сатус: Оплачено
*================================================*

* Задача 15:
Почитать про списки HTML.
Ответить на вопросы:
- Какие есть виды списков?
- Из чего состоит список?
- Как можно отсортировать список?
- Как добавить нумерацию списку?
- Написать пронумерованый список фамилий (рандомных)

* Решение:
- Какие есть виды списков?
1. Маркированный список
Маркированный список представляет собой неупорядоченный список (от англ. Unordered List). Создаётся с помощью парного тега <ul></ul>. В качестве маркера элемента списка выступает метка, например, закрашенный кружок.
Каждый элемент списка создаётся с помощью парного тега <li></li> (от англ. List Item).

Для тега <ul> доступны ‎глобальные атрибуты.
Пример:
<ul>
  <li>Microsoft</li>
  <li>Google</li>
  <li>Apple</li>
  <li>IBM</li>
</ul>

2. Нумерованный список
Нумерованный список создаётся с помощью парного тега <ol></ol>. Каждый пункт списка также создаётся с помощью элемента <li>. Браузер нумерует элементы по порядку автоматически и если удалить один или несколько элементов такого списка, то остальные номера будут автоматически пересчитаны.

Для тега <li> доступен атрибут value, который позволяет изменить номер по умолчанию для выбранного элемента списка. Например, если для первого пункта списка задать <li value="10">, то остальная нумерация будет пересчитана относительно нового значения.

Для тега <ol> доступны следующие атрибуты:
reversed	Атрибут reversed задает отображение списка в обратном порядке (например, 9, 8, 7…).
start	Атрибут start задает начальное значение, от которого пойдет отсчет нумерации, например, конструкция <ol start="10"> первому пункту присвоит порядковый номер «10». Также можно одновременно задавать тип нумерации, например, <ol type="I" start="10">.
type	Атрибут type задает вид маркера для использования в списке (в виде букв или цифр). Принимаемые значения:
1 — значение по умолчанию, десятичная нумерация.
A — нумерация списка в алфавитном порядке, заглавные буквы (A, B, C, D).
a — нумерация списка в алфавитном порядке, строчные буквы (a, b, c, d).
I — нумерация римскими заглавными цифрами (I, II, III, IV).
i — нумерация римскими строчными цифрами (i, ii, iii, iv).

3. Список определений
Списки определений создаются с помощью тега <dl></dl>. Для добавления термина применяется тег <dt></dt>, а для вставки определения — тег <dd></dd>.
<dl>
  <dt>Режиссер:</dt>
    <dd>Петр Точилин</dd>
  <dt>В ролях:</dt>
    <dd>Андрей Гайдулян</dd>
    <dd>Алексей Гаврилов</dd>
    <dd>Виталий Гогунский</dd>
    <dd>Мария Кожевникова</dd>
</dl>

4. Вложенный список
Зачастую возможностей простых списков не хватает, например, при создании оглавления никак не обойтись без вложенных пунктов. Разметка для вложенного списка будет следующей:

<ul>
 <li>Пункт 1.</li>
  <li>Пункт 2.
    <ul>
      <li>Подпункт 2.1.</li>
       <li>Подпункт 2.2.     
        <ul>
          <li>Подпункт 2.2.1.</li>
          <li>Подпункт 2.2.2.</li>
          </ul>
       </li>          
      <li>Подпункт 2.3.</li>
    </ul>
  </li>
 <li>Пункт 3.</li>
</ul>

5. Многоуровневый нумерованный список
Многоуровневый список используется для отображения элементов списка на разных уровнях с различными отступами. Разметка для многоуровневого нумерованного списка будет следующей:

<ol>
  <li>пункт</li> <!-1.->
  <li>пункт           
    <ol>
      <li>пункт</li> <!-2.1.->
      <li>пункт</li> <!-2.2.->
      <li>пункт
        <ol>
          <li>пункт</li> <!-2.3.1.->
          <li>пункт</li> <!-2.3.2.->
          <li>пункт</li> <!-2.3.3.-> 
        </ol>
      </li> <!-2.3.->
      <li>пункт</li> <!-2.4.->  
    </ol>
  </li> <!-2.->
  <li>пункт</li> <!-3.->        
  <li>пункт</li> <!-4.->        
</ol>
Такая разметка по умолчанию создаст для каждого вложенного списка новую нумерацию, начинающуюся с единицы. Чтобы сделать вложенную нумерацию, нужно использовать следующие свойства:
counter-reset сбрасывает один или несколько счётчиков, задавая значение для сброса;
counter-increment задаёт значение приращения счётчика, т.е. с каким шагом будет нумероваться каждый последующий пункт;
content — генерируемое содержимое, в данном случае отвечает за вывод номера перед каждым пунктом списка.

- Из чего состоит список?
HTML-списки используются для группировки связанных между собой фрагментов информации. Существует три вида списков:

маркированный список — <ul> — каждый элемент списка <li> отмечается маркером,
нумерованный список — <ol> — каждый элемент списка <li> отмечается цифрой,
список определений — <dl> — состоит из пар термин <dt> — <dd> определение.

Каждый список представляет собой контейнер, внутри которого располагаются элементы списка или пары термин-определение. Элементы списка ведут себя как блочные элементы, располагаясь друг под другом и занимая всю ширину блока-контейнера. Каждый элемент списка имеет дополнительный блок, расположенный сбоку, который не участвует в компоновке.

- Как можно отсортировать список?
Я облазив достаточное количество сайтов для удостоверенности, что отсортировать список с помощью html нельзя.

- Как добавить нумерацию списку?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Нумерацию списка можно сделать с помощью атрибута "start". Например, конструкция <ol start="10"> первому пункту присвоит порядковый номер «10». Также можно одновременно задавать тип нумерации, например, <ol type="I" start="10">.

!!!!!!!!!! Для добавления нумерации достаточно использовать тег <ol>. Атрибут "start" дает возможность уточнить порядковый номер первого элемента
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

- Написать пронумерованый список фамилий (рандомных)


* Сатус: Оплачено
*================================================*

* Задача 16:
- выучить произношение
- выучить перевод
- прописать слова по 1 строчке (на листочке/в тетрадке)
- составить с каджым словом по 2 предложения

- слова:
commit
свершить совершить совершить совершить совершить совершить совершить совершить совершить совершить
I committed an action that gave a result я совершил действие которое  дало результат
I committed a crime about not learned homework я совершил преступление по поводу не выученного домашнего задания

push push push push push push push push push push push push push push push push push push push
от себя от себя от себя от себя от себя от себя от себя от себя от себя от себя от себя от себя
I pushed the ball away from me я оттолкнул мяч от себя
I pushed the car to a gas station я оттолкал машину на заправку

remote
удаленный удаленный удаленный удаленный удаленный удаленный удаленный удаленный удаленный удаленный
remote file cannot be returned удаленный файл нельзя вернуть 
remote file cannot be returned я вернул удаленный файл

pull
вытащить вытащить вытащить вытащить вытащить вытащить вытащить вытащить вытащить вытащить вытащить
i pulled the job out of git hub я вытащил задание из гит хаб
the task that I pulled out turned out to be simple задание которое я вытащил оказалось простым

hub
ступица втулка ступица втулка ступица втулка ступица втулка ступица втулка ступица втулка ступица втулка
I replaced the hub on the bike я заменил ступицу на велосипеде
the old hub was broken старая ступица была поломана

layout
расположение расположение расположение расположение расположение расположение расположение расположение 


add
добавлять добавлять добавлять добавлять добавлять добавлять добавлять добавлять добавлять добавлять добавлять
the chef added a couple of dishes to the menu шеф добавил пару блюд в меню
I added workouts to my daily routine я добавил тренировки в свой роспорядок дня

select
выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать выбрать
I dont know what to select for a gift for the new year я не знаю что авыбрать на подарок на новый год
i select correct answer  я выбрал правильный ответ 

checkbox
флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок флажок
i install checkbox in this sentence


option
вариант вариант вариант вариант вариант вариант вариант ввариант вариант вариант вариант варинат вариант вариант 


name
имя имя имя имя имя имя имя имя имя имя имя имя имя имя имя имя имя имя имя имя
i give name for my dog

value
значение значение значение значение значение значение значение значение значение значение значение значение
value of this word dont correct

action
действие действие действие действие действие действие действие действие действие действие действие действие
i comitted a great action


* Решение: 
(приложить фото прописанных слов и скинуть составленные предложения)

* Статус: Оплачено
*================================================*

* Задача 17:
Прочитать про javascript (далее js)
Ответить на вопросы:
- Что такое javascript?
- Для чего используется?
- Как записать js в html (2 варианта)?
- В чем преимущества обеих вариантов?
- Какие есть основные функции в js (например alert)?

* Решение:
-Что такое javascript?
javascript - изначально был создан для того, "чтобы делать страницы живыми". javascript используеться в html и css.
- Для чего используется?
Для написания различных кодов и программ.
- Как записать js в html (2 варианта)?
перший вариант записать в ТЕГЕ <script> </script>
другий вариант в отдельной папке
- В чем преимущества обеих вариантов?
преимущество в затрате времени написания кода, через скрипт быстрее, чем создавать отдельную папку.
но создавать отдельную папку безопаснее.
функции в джава скрипт:
debounce
Функция debounce крайне полезна, когда дело доходит до производительности обработчиков событий. Если вы не используете функцию debounce с событиями scroll, resize, key*, вы, вероятно, не правы. Вот функция debounce, которая сделает ваш код более эффективным: Функция debounce не позволяет обработчику события выполниться более одного раза в заданный промежуток времени. Это особенно выжно для часто срабатывающих событий. 
poll
Иногда у вас не будет возможности отследить событие наступления желаемого состояния — если события не существует, необходимо периодически проверять определенное состояние:Такой подход периодического опрашивания уже давно используется в веб и будет использоваться в будущем!

once
Иногда необходимо, чтобы какая-то функция выполнилась только однажды, подобно событию onload. Код ниже позволит вам добавить такую функциональность:Функция once гарантирует, что функция будет вызвана только один раз, тем самым позволяет избежать повторной инициализации!

getAbsoluteUrl
Получение абсолютного URL из строки не такая простая задача, какой кажется. Существует конструктор URL, который не работает, если не передать ему требуемые параметры (которые иногда невозможно передать). Вот хороший трюк для получения абсолютного URL из строки:Обработка атрибута href элемента предоставляет надежный способ получения абсолютного URL.

isNative
Знание того, является ли функция встроенной или нет может быть полезно, если вы собираетесь ее переопределить. Следующий код может вам в этом помочь:Эта функция выглядит не симпатично, но выполняет свою работу!

insertRule
Все мы знаем, что можно получить список элементов DOM по селектору (с помощью document.querySelectorAll) и для каждого из них добавить атрибут style, но более эффективным будет задать стиль для селектора (как это делается в CSS):Это особенно полезно для динамичных сайтов. Если вы добавляете правило к селектору, вам не нужно перебирать и стилизовать все элементы, удовлетворяющие этому селектору.

matchesSelector
Мы часто валидируем пользовательский ввод, проверяем, что все поля формы заполнены корректно, прежде, чем двигаться дальше. Но как часть мы проверяем элемент? Вы можете использовать функцию ниже для проверки, удовлетворяет ли элемент заданному селектору:


* Статус: Оплачено
*================================================*

* Задача 18:
Создать html страницу на которой выведется сообщение при помощи javascript "Привет Петр!"
Javascript должен быть описан непосредственно в файле html

* Решение:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Решение лежит в папке html_start в папке hw18 в которой лежит папка Пётр

Ты положил в папку hw18/privet_Petr джаваскрипт файл alert_Petr.js, но не подключал к html файлу.
В задаче не было указано, что нужно создавать джэс файлы. Его нужно удалить
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Статус: Готово
*================================================*

* Задача 19:
Создать html страницу на которой выведется сообщение при помощи javascript "Привет Петр!"
Javascript должен быть отдельном файле

* Решение:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Решение лежит в папке html_start в папке hw19 в которой лежит папка Пётр

В отличии от задачи №18 джаваскрипт нужно подключить. Ты файл создал, но не подключил его к html документу
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Статус: Готово
*================================================*

* Задача 20:
Почитать про атрибуты селекторов в CSS.
Ответить на вопросы:
- Что такое атрибуты селекторов?
- Какие они есть?
- Зачем применяются?
- Как опредилить значение атрибута, начинающегося с определенного текста?

* Решение:
что такое атрибут?
атрибут это дополнительная информация селектора.
какие есть атрибуты?
placeholder. name. class. id...
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
зачем применяются?
для указания, что ты будешь менять конкретно (класс, айди)

- Как опредилить значение атрибута, начинающегося с определенного текста?
в смысле определить?
Ты его сам указываешь. так и определишь (как назвал).
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Статус: Готово к проверке
*================================================*

* Задача 21:
Смотри файл /homeworks/hw21/task21.html .
Это уже готовый html документ. Открой и посмотри его. Разберись.

Разобрался?
Смотри файл /homeworks/hw21/task21.png .
Задача следующая - при помощи атрибутов селекторов сделать так, чтобы документ /homeworks/hw21/task21.html выглядил так же как на /homeworks/hw21/task21.png .
Необхожимо создать файл .css , подключить его к файлу task21.html (если забыл как это делать, смотри дз 7).
Попробуй сделать дз без подсказки.

Подсказка:
- если у селектора 'a' значение атрибута 'href' начинается с 'http://google.com' то цвет должен быть зеленым
- если у селектора 'a' значение атрибута 'href' начинается с 'http://yandex.ru' то цвет должен быть зеленым
- если у селектора 'a' значение атрибута 'href' начинается с 'http://vk.ru' то цвет должен быть зеленым
- если у селектора 'input' значение атрибута 'name' = 'firstname' то цвет должен быть красным
- если у селектора 'input' значение атрибута 'name' = 'lastname' то цвет должен быть зеленым
- если у селектора 'input' значение атрибута 'type' = 'email' то цвет должен быть синим

* Решение:

* Статус: Готово
*================================================*

* Задача 22:
Почитать про псевдоклассы в CSS.
Ответить на вопросы:
- Что такое псевдоклассы css?
- Какие есть псевдоклассы?
- Зачем они нужны?
- Что они делают?
- Какие есть псевдоклассы у селектора 'a'
- Какие есть псевдоклассы у селектора 'input'
- Привести примеры по предыдущим двум вопросам

* Решение:
что такое псевдоклассы css?
псевдокласс это особое слово которое дополняет селектор и определяет его особое состояние.
например :hover изменяет цвет слова или предложения когда наводишь на него мышь.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
какие есть псевдоклассы?

где ответ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Зачем они нужны?
Псевдоклассы дают возможность стилизовать элемент на основе не только отношений в DOM-дереве, но и основываясь на внешних факторах, таких как история посещений (например, :visited).

Что такое DOM-дерево? Если не знаешь, зачем пишешь?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Что они делают?
 При использовании псевдоклассов браузер не перегружает текущий документ, поэтому с помощью псевдоклассов можно получить разные динамические эффекты на странице.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
какие есть псевдоклассы у селектора "а"?

где ответ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
какие есть псевдоклассы у селектора "input"?

где ответ?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
привести примеры по двум предыдущим вопросам:

где ответ?
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
* Статус: В доработке
*================================================*

* Задача 23:
Смотри файл /homeworks/hw23/task23.html .
Задача:
- создать и подключить файл .css
- при помощи псевдоклассов сделать так, чтобы при навидении мыши на ссылку 'Link', текст становился красным.

* Решение:
решение лежит в папке hw23
* Статус: Готово
*================================================*

* Задача 24:
Почитать про параметр transition в CSS.
Ответить на вопросы:
- Зачем нужен параметр transition?
- Что он делает?
- Приведи 2 примера зачем можно использовать transition.

* Решение:
зачем нужен параметр transition?
Устанавливает эффект перехода между двумя состояниями элемента, они могут быть определены с помощью псевдоэлемента :hover или :active, а также динамически через JavaScript.

что он делает?
он делает анимацию элементов и разную скорость анимации.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
- Приведи 2 примера зачем можно использовать transition.

transition: transform;
transition-property:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
* Статус: Готово к проверке
*================================================*

* Задача 25:
Смотри файл /homeworks/hw25/task25.html и файл /homeworks/hw25/styles.css .
Если заметил, при наведении мыши на ссылку 'Link' она увеличивается.
Красный квадрат тоже увеличиться, если на него навести.
Но это все происходит очкеь резко.
Используй параметр transition и сделай так, чтобы текст увеличивался и уменьшался плавно в течении 1 секунды.
Квадрат же тоже должен увеличиваться плавно в течении 0.5 секунды, а уменьшаться должен резко.
Попробуй без подсказки :)

Подсказка:
Чтобы квадрат уменьшался резко, попробуй положить transition в .red-kubin:hover.

* Решение:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Твой квадрат плавно увеличивается только по высоте. По ширине он все еще очень резко увеличивается.
Сделай так, что бы он плавно увеличивался и по высоте и по ширине.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

* Статус: Готово к проверке
*================================================*

* Задача 26:
Лекция по теме "Как работает WEB"

* Статус: Готово
*================================================*

* Задача 27:
Выучить презентацию по теме "Как работает WEB" и рассказать тему.

* Статус: Готово
*================================================*

* Задача 27:
Посмотреть видео Хауди и повторить все за ним.
Когда он все стирает и начинает новое что-то рассказывать ты не стирай а создавай новый файл.
Например: начинаешь повторять за ним, создаешь файл 1.php. 
Он рассказал там что-то, и говорит а теперь будем что-то другое делать и все стерает. 
Ты закрываешь файл 1.php, создаешь 2.php и повторяешь дальше. Так у тебя будет 10 файлов в которых будет то, что тебе Хауди учил.
+ установку локального сервера повторять не надо, т.к. мы его уже установили (это nginx).
Если забыл - то твой локальный сервер доступен по адресу http://localhost/ а файлы его лежат по пути /var/www/html (вроде бы, но где-то в папке /var/www/ точно)
https://www.youtube.com/watch?v=a6xtQQqx1tg

* Статус: Готово к проверке
*================================================*

* Задача 28:
[Programming tests]
Добавить в шапку сайта вывод времени (см. скриншот hw28/task.jpg).

* Статус: Готово к проверке
*================================================*

* Задача 29:
[Programming tests]
Добавить в шапку сайта над выводом времени (внутри ораньжевого блока) фразу "Добрый день!".
Фраза должна меняться в зависимости от времени.
Если время от 0 до 5 - Доброй ночи.
Если время от 5 до 12 - Доброе утро.
Если время от 12 до 18 - Добрый день.
Если время от 18 до 0 - Добрый вечер.


* Статус: Готово к проверке
*================================================*

* Задача 30:
[Programming tests]
Добавить в шапку сайта под выводом времени вывод даты в формате "День недели, дд.мм.гггг".
Ниже на каждый день недели вывести слова из песни "Ти ж мене пидманула"

* Статус: Готово к проверке
*================================================*

* Задача 31:
[Programming tests]
Обновить верстку сайта согласно картинке в папке hw31.
Добавить два блока. В левом форма для добавления отзыва.
Справа добавь три отзыва.

* Статус: Готово к проверке
*================================================*

* Задача 32:
[Programming tests]
Добавить логику для формы добавления отзывов:
после нажатия кнопки "Отправить" на экран должно вывестись указанное имя и текст который был указан в формате "Имя: Написанный отзыв".
Логику описывать в отдельном файле. Создать папку 'feedback', в ней файл 'leave_feedback.php'.

* Статус: Готово к проверке
*================================================*

* Задача 33:
[Programming tests]
Переместить страницу index.php в папку 'tasks'.
Создать новую страницу index.php в которой создать каркас согласно макета нарисованного на бумажке.

* Статус: Готово
*================================================*

* Задача 34:
Посмотреть лекцию по git

* Статус: Готово
*================================================*

* Задача 35:
[Programming tests]
Реализовать интерфейс шапки сайта согласна макета.

* Статус: Готово
*================================================*

* Задача 36:
[Programming tests]
Реализовать интерфейс блока с ссылкой на "Задачи" согласно макета

* Статус: Готово к проверке
*================================================*

* Задача 37:
[Programming tests]
Реализовать интерфейс блока с ссылкой на "Статьи" согласно макета

* Статус: Готово к проверке
*================================================*

* Задача 38:
[Programming tests]
Пройти игру по гиту htmltps://learngitbranching.js.org/ и в папку задачи положить скриншот прохождения (hw38)

* Статус: Готово к проверке
*================================================*

* Задача 39:
[Programming tests]
Реализовать интерфейс блока с возможность добавить свою задачу и связаться с создателем согласно макета

* Статус: Готово к проверке
*================================================*

* Задача 40:
Изучить приоритеты CSS стилей.
Попробовать на практике перебить приоритет уже написанныъ стилей
В решении написать значение приоритета для каждой составляющей.

* Решение:

* Статус: Новая
*================================================*

* Задача 41:
Изучить @media запросы в css.

* Статус: Новая
*================================================*

* Задача 42:
[Projgramming test]
Адаптировать programmingtest к разрешению 400 px

* Статус: Новая
*================================================*
